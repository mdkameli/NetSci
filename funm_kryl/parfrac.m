function [ r ] = parfrac( type,degree,param1 )
% PARFRAC Returns a partial fraction.
%   R = PARFRAC(TYPE,DEGREE) returns a structure R which contains
%   the poles and coefficients of a partial fraction.

if nargin == 0,
    type = 'expBA';
    disp('type not defined, using expBA.');
end;

if nargin <= 1,
    degree = 16;
end;

n = degree;

switch type,
    
  case 'expCF',                      % Cody-Meinardus-Varga via Caratheodory-Fejer
       K = 75;
       nf = 1024;
       w = exp(2*sqrt(-1)*pi*(0:nf-1)/nf);
       t = real(w);
       scl = 9;
       F = exp(scl*(t-1)./(t+1+1e-16));
       c = real(fft(F))/nf;
       keyboard
       f = polyval(c(K+1:-1:1),w);
       [U,S,V] = svd(hankel(c(2:K+1)));
       s = S(n+1,n+1);
       u = U(K:-1:1,n+1)'; v = V(:,n+1)';
       zz = zeros(1,nf-K);
       b = fft([u zz])./fft([v zz]);
       rt = f-s*w.^K.*b;
       %rtc = real(fft(rt))/nf;
       zr = roots(v); qk = zr(abs(zr)>1);
       qc = poly(qk);
       pt = rt.*polyval(qc,w);
       ptc = real(fft(pt)/nf);
       ptc = ptc(n+1:-1:1); ck = 0*qk;
       for k = 1:n
           q = qk(k); q2 = poly(qk(qk~=q));
           ck(k) = polyval(ptc,q)/polyval(q2,q);
       end
       zk = scl*(qk-1).^2./(qk+1).^2;
       ck = 4*ck.*zk./(qk.^2-1);
       ck = -ck;
       
       r.name = 'Cody-Meinardus-Varga via Caratheodory-Fejer';
       r.absterm = 0;
       I = find(abs(imag(zk)) < 10*eps);
       r.single_poles = zk(I);
       r.single_coeff = ck(I);
       I = find(imag(zk) >= 10*eps);
       r.conj_poles = zk(I);
       r.conj_coeff = ck(I);

  case 'expWP',                     % Weideman parabolic contour
       theta = pi*(-(n-1):2:n-1)/n;
       zk = n*(.1309-.1194*theta.^2+.25*sqrt(-1)*theta).';
       w = n*(-.1194*2*theta+.25*sqrt(-1)).';
       ck = (sqrt(-1)/n)*exp(zk).*w;
       ck = - ck;

       r.name = 'Weideman parabolic contour';
       r.absterm = 0;
       I = find(abs(imag(zk)) < 10*eps);
       r.single_poles = zk(I);
       r.single_coeff = ck(I);
       I = find(imag(zk) >= 10*eps);
       r.conj_poles = zk(I);
       r.conj_coeff = ck(I);
 
  case 'expTW',                     % Talbot-Weideman cotangent contour
       theta = pi*(-(n-1):2:n-1)/n;
       zk = n*(.5017*theta.*cot(0.6407*theta)-0.6122+0.2645*sqrt(-1)*theta).';
       w = n*(-.5017*0.6407*theta./(sin(0.6407*theta).^2)+.5017*cot(0.6407*theta)+0.2645*sqrt(-1)).';
       ck = (sqrt(-1)/n)*exp(zk).*w;
       ck = - ck;
       
       r.name = 'Talbot-Weideman cotangent contour';
       r.absterm = 0;
       I = find(abs(imag(zk)) < 10*eps);
       r.single_poles = zk(I);
       r.single_coeff = ck(I);
       I = find(imag(zk) >= 10*eps);
       r.conj_poles = zk(I);
       r.conj_coeff = ck(I);
       
  case 'expWH',                     % Weideman hyperbolic contour
       theta = pi*(-(n-1):2:n-1)/n;
       zk = 2.246*n*(1-sin(1.1721-0.3443*sqrt(-1)*theta)).';
       w = 2.246*n*( -cos(1.1721-0.3443*sqrt(-1)*theta))*(-0.3443*sqrt(-1));
       ck = (sqrt(-1)/n)*exp(zk).*w.';
       ck = - ck;
       
       r.name = 'Weidemann hyperbolic contour';
       r.absterm = 0;
       I = find(abs(imag(zk)) < 10*eps);
       r.single_poles = zk(I);
       r.single_coeff = ck(I);
       I = find(imag(zk) >= 10*eps);
       r.conj_poles = zk(I);
       r.conj_coeff = ck(I);
       
   case 'expBA',
       r = bestapprox_data(degree);
  
   case 'cfud',
       [weights,poles] = ratcfud(degree,param1);
       r.name = 'CF approximation on unit disk';
       r.absterm = 0;
       r.single_poles = poles;
       r.single_coeff = -weights;
       r.conj_poles = [];
       r.conj_coeff = [];
       
   case 'inv',
       r.name = 'inverse function 1/z (solving linear system)';
       r.absterm = 0;
       r.single_poles = 0;
       r.single_coeff = -1;
       r.conj_poles = [];
       r.conj_coeff = [];
   
    case 'sqrtZ',
       r.name = 'best relative Zolotarov approx. to sqrt(x) on [1,param1]';
       [weights,poles,absterm] = ratsqrt(param1,degree);
       r.absterm = absterm;
       r.single_poles = poles;
       r.single_coeff = -weights;
       r.conj_poles = [];
       r.conj_coeff = [];
       
    case 'sqrtinvZ',
       r.name = 'best relative Zolotarov approx. to 1/sqrt(x) on [1,param1]';
       [weights,poles] = ratsqrtinv(param1,degree);
       r.absterm = 0;
       r.single_poles = poles;
       r.single_coeff = -weights;
       r.conj_poles = [];
       r.conj_coeff = [];
       
    case 'signZ',
       r.name = 'Zolotarov approx. to sign(x) on [-param1,param1]\[-1,1]';
       n = ceil(degree/2);
       [weights,poles] = ratsign(param1,n);
       r.absterm = 0;
       r.single_poles = [];
       r.single_coeff = [];
       r.conj_poles = poles(1:n);
       r.conj_coeff = -weights(1:n);
       
   otherwise
       error('parfrac: unknown type')
end











%%%%%%%%%%%%%%%%%%%%













%%




function r = bestapprox_data(degree)

switch degree
case 2
  z = [
    -5.8479863263849063e-001 + i*-1.1855377812415784e+000
    -5.8479863263849063e-001 + i*1.1855377812415784e+000
  ];
  kappa = [
    -1.6885872734712942e-001 + i*8.0945019772077931e-001
    -1.6885872734712942e-001 + i*-8.0945019772077931e-001
  ];
  absterm = 7.3586701695805279e-003;
case 3
  z = [
    -1.9820847875074080e-001 + i*2.4107321029593383e+000
    -1.9820847875074080e-001 + i*-2.4107321029593383e+000
    -1.3688493230338539e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    -6.9116392297431128e-001 + i*4.3182218073431179e-002
    -6.9116392297431128e-001 + i*-4.3182218073431179e-002
    1.4838485523029701e+000 + i*0.0000000000000000e+000
  ];
  absterm = -7.9938063633568784e-004;
case 4
  z = [
    3.6784538618153978e-001 + i*3.6581212986786675e+000
    3.6784538618153978e-001 + i*-3.6581212986786675e+000
    -1.5483932232971220e+000 + i*1.1918229466274257e+000
    -1.5483932232971220e+000 + i*-1.1918229466274257e+000
  ];
  kappa = [
    -7.3395957163942191e-002 + i*4.4999992247406273e-001
    -7.3395957163942191e-002 + i*-4.4999992247406273e-001
    6.1686779567832917e-002 + i*-1.9050409793030811e+000
    6.1686779567832917e-002 + i*1.9050409793030811e+000
  ];
  absterm = 8.6522406952888525e-005;
case 5
  z = [
    1.0395056627937977e+000 + i*4.9213907336950271e+000
    1.0395056627937977e+000 + i*-4.9213907336950271e+000
    -1.4405959942514723e+000 + i*2.3969835252938436e+000
    -1.4405959942514723e+000 + i*-2.3969835252938436e+000
    -2.1554154620085577e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    2.3878868408807535e-001 + i*1.0373867230367907e-001
    2.3878868408807535e-001 + i*-1.0373867230367907e-001
    -1.8723857791332466e+000 + i*-3.7820630682407275e-001
    -1.8723857791332466e+000 + i*3.7820630682407275e-001
    3.2718193944526837e+000 + i*4.3274964214007172e-065
  ];
  absterm = -9.3457131530266459e-006;
case 6
  z = [
    1.7819885196256902e+000 + i*6.1965120962654243e+000
    1.7819885196256902e+000 + i*-6.1965120962654243e+000
    -1.1585523628230170e+000 + i*3.6147724480383849e+000
    -1.1585523628230170e+000 + i*-3.6147724480383849e+000
    -2.4006027476632035e+000 + i*1.1931292641501552e+000
    -2.4006027476632035e+000 + i*-1.1931292641501552e+000
  ];
  kappa = [
    8.3581626491457103e-002 + i*-1.0642920552995283e-001
    8.3581626491457103e-002 + i*1.0642920552995283e-001
    -6.6300688564711008e-001 + i*1.4514124962062371e+000
    -6.6300688564711008e-001 + i*-1.4514124962062371e+000
    5.7901301012950457e-001 + i*-4.2868875753470874e+000
    5.7901301012950457e-001 + i*4.2868875753470874e+000
  ];
  absterm = 1.0084543748996708e-006;
case 7
  z = [
    2.5757260863919935e+000 + i*7.4809774314099498e+000
    2.5757260863919935e+000 + i*-7.4809774314099498e+000
    -7.5760863371247000e-001 + i*4.8436185091371504e+000
    -7.5760863371247000e-001 + i*-4.8436185091371504e+000
    -2.4231963513685182e+000 + i*2.3930293109369365e+000
    -2.4231963513685182e+000 + i*-2.3930293109369365e+000
    -2.9410969231931405e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    -3.9680465809293221e-002 + i*-5.2477616257074415e-002
    -3.9680465809293221e-002 + i*5.2477616257074415e-002
    9.0260521366982593e-001 + i*7.4003615604162687e-001
    9.0260521366982593e-001 + i*-7.4003615604162687e-001
    -4.4566693870505478e+000 + i*-1.5604498955857689e+000
    -4.4566693870505478e+000 + i*1.5604498955857689e+000
    7.1876259359111998e+000 + i*-1.4145148175077053e-063
  ];
  absterm = -1.0874974913752479e-007;
case 8
  z = [
    3.4085395096636524e+000 + i*8.7730345535790395e+000
    3.4085395096636524e+000 + i*-8.7730345535790395e+000
    -2.6949098091275170e-001 + i*6.0820325874935426e+000
    -2.6949098091275170e-001 + i*-6.0820325874935426e+000
    -2.2922491423048661e+000 + i*3.6007714934833812e+000
    -2.2922491423048661e+000 + i*-3.6007714934833812e+000
    -3.2209452399451139e+000 + i*1.1936196046206511e+000
    -3.2209452399451139e+000 + i*-1.1936196046206511e+000
  ];
  kappa = [
    -2.8129757023298979e-002 + i*1.1577384208923723e-002
    -2.8129757023298979e-002 + i*-1.1577384208923723e-002
    6.3258805131157447e-001 + i*-4.4392309694789711e-001
    6.3258805131157447e-001 + i*4.4392309694789711e-001
    -2.4362407257817664e+000 + i*3.7167556135083211e+000
    -2.4362407257817664e+000 + i*-3.7167556135083211e+000
    1.8317717057715215e+000 + i*-9.5256080740643370e+000
    1.8317717057715215e+000 + i*9.5256080740643370e+000
  ];
  absterm = 1.1722652116334908e-008;
case 9
  z = [
    4.2722773396054796e+000 + i*1.0071413406121069e+001
    4.2722773396054796e+000 + i*-1.0071413406121069e+001
    2.8571635951938490e-001 + i*7.3287579593814751e+000
    2.8571635951938490e-001 + i*-7.3287579593814751e+000
    -2.0477955245274932e+000 + i*4.8162322656968417e+000
    -2.0477955245274932e+000 + i*-4.8162322656968417e+000
    -3.3196836164287458e+000 + i*2.3913415668423581e+000
    -3.3196836164287458e+000 + i*-2.3913415668423581e+000
    -3.7264404432550835e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    1.8222944567510906e-003 + i*1.3400277260199536e-002
    1.8222944567510906e-003 + i*-1.3400277260199536e-002
    -1.5496216680440192e-001 + i*-4.4758718068124054e-001
    -1.5496216680440192e-001 + i*4.4758718068124054e-001
    2.4638881282038256e+000 + i*2.7896859476773539e+000
    2.4638881282038256e+000 + i*-2.7896859476773539e+000
    -1.0197195761527100e+001 + i*-4.5617679367058344e+000
    -1.0197195761527100e+001 + i*4.5617679367058344e+000
    1.5772898239504585e+001 + i*1.9476827360496201e-063
  ];
  absterm = -1.2632924833223142e-009;
case 10
  z = [
    5.1611912720200763e+000 + i*1.1375156251916541e+001
    5.1611912720200763e+000 + i*-1.1375156251916541e+001
    8.9440470160948093e-001 + i*8.5827568986133862e+000
    8.9440470160948093e-001 + i*-8.5827568986133862e+000
    -1.7154060157689581e+000 + i*6.0389349254839191e+000
    -1.7154060157689581e+000 + i*-6.0389349254839191e+000
    -3.2837528832312990e+000 + i*3.5943867723559051e+000
    -3.2837528832312990e+000 + i*-3.5943867723559051e+000
    -4.0277324675187494e+000 + i*1.1938560664553282e+000
    -4.0277324675187494e+000 + i*-1.1938560664553282e+000
  ];
  kappa = [
    5.7849038580128831e-003 + i*6.8585070894469592e-004
    5.7849038580128831e-003 + i*-6.8585070894469592e-004
    -2.7258698029640316e-001 + i*1.4211727031630849e-002
    -2.7258698029640316e-001 + i*-1.4211727031630849e-002
    2.5655849548411287e+000 + i*-1.2163857061202055e+000
    2.5655849548411287e+000 + i*1.2163857061202055e+000
    -7.1171651040990485e+000 + i*8.8195331578731757e+000
    -7.1171651040990485e+000 + i*-8.8195331578731757e+000
    4.8183819908450287e+000 + i*-2.1054597238399737e+001
    4.8183819908450287e+000 + i*2.1054597238399737e+001
  ];
  absterm = 1.3611205233454475e-010;
case 11
  z = [
    6.0710610033237300e+000 + i*1.2683520454768695e+001
    6.0710610033237300e+000 + i*-1.2683520454768695e+001
    1.5468803139623510e+000 + i*9.8431732969045154e+000
    1.5468803139623510e+000 + i*-9.8431732969045154e+000
    -1.3125381205883087e+000 + i*7.2683188400373320e+000
    -1.3125381205883087e+000 + i*-7.2683188400373320e+000
    -3.1429903144926747e+000 + i*4.8030732473603956e+000
    -3.1429903144926747e+000 + i*-4.8030732473603956e+000
    -4.1765093418863399e+000 + i*2.3904652786364071e+000
    -4.1765093418863399e+000 + i*-2.3904652786364071e+000
    -4.5116223104974518e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    8.8167237609111616e-004 + i*-2.2803681114908583e-003
    8.8167237609111616e-004 + i*2.2803681114908583e-003
    -3.4047278889549865e-002 + i*1.4565219397515283e-001
    -3.4047278889549865e-002 + i*-1.4565219397515283e-001
    -3.0851281175846018e-001 + i*-1.9833753212408187e+000
    -3.0851281175846018e-001 + i*1.9833753212408187e+000
    5.9835669564958325e+000 + i*8.4644572439900774e+000
    5.9835669564958325e+000 + i*-8.4644572439900774e+000
    -2.2940708037241688e+001 + i*-1.1849855003577570e+001
    -2.2940708037241688e+001 + i*1.1849855003577570e+001
    3.4597639064522511e+001 + i*8.7361664716511847e-063
  ];
  absterm = -1.4663111949374870e-011;
case 12
  z = [
    6.9986879086036167e+000 + i*1.3995916624970727e+001
    6.9986879086036167e+000 + i*-1.3995916624970727e+001
    2.2359682461306787e+000 + i*1.1109296232702844e+001
    2.2359682461306787e+000 + i*-1.1109296232702844e+001
    -8.5170709671549782e-001 + i*8.5038328256346336e+000
    -8.5170709671549782e-001 + i*-8.5038328256346336e+000
    -2.9178685450793105e+000 + i*6.0173459240923712e+000
    -2.9178685450793105e+000 + i*-6.0173459240923712e+000
    -4.2061242043183009e+000 + i*3.5909207588846188e+000
    -4.2061242043183009e+000 + i*-3.5909207588846188e+000
    -4.8274934521610637e+000 + i*1.1939879912230824e+000
    -4.8274934521610637e+000 + i*-1.1939879912230824e+000
  ];
  kappa = [
    -8.1843349926244489e-004 + i*-5.8135358242612193e-004
    -8.1843349926244489e-004 + i*5.8135358242612193e-004
    6.8571494249760126e-002 + i*3.8419082886647804e-002
    6.8571494249760126e-002 + i*-3.8419082886647804e-002
    -1.3194115340711843e+000 + i*-1.8352358287335077e-001
    -1.3194115340711843e+000 + i*1.8352358287335077e-001
    8.2382559342348216e+000 + i*-2.7961912623038216e+000
    8.2382559342348216e+000 + i*2.7961912623038216e+000
    -1.8785977421525402e+001 + i*2.0237285126063458e+001
    -1.8785977421525402e+001 + i*-2.0237285126063458e+001
    1.1799379956012203e+001 + i*-4.6411635333526775e+001
    1.1799379956012203e+001 + i*4.6411635333526775e+001
  ];
  absterm = 1.5794568370512386e-012;
case 13
  z = [
    7.9415842237503123e+000 + i*1.5311867991179952e+001
    7.9415842237503123e+000 + i*-1.5311867991179952e+001
    2.9561938216958228e+000 + i*1.2380530211015907e+001
    2.9561938216958228e+000 + i*-1.2380530211015907e+001
    -3.4222764042844900e-001 + i*9.7449668797523419e+000
    -3.4222764042844900e-001 + i*-9.7449668797523419e+000
    -2.6231285284511761e+000 + i*7.2369922995548706e+000
    -2.6231285284511761e+000 + i*-7.2369922995548706e+000
    -4.1395468351420037e+000 + i*4.7956670686606850e+000
    -4.1395468351420037e+000 + i*-4.7956670686606850e+000
    -5.0116980787831356e+000 + i*2.3899519823816471e+000
    -5.0116980787831356e+000 + i*-2.3899519823816471e+000
    -5.2967144802299986e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    -3.0770539329353405e-004 + i*2.6269393788859837e-004
    -3.0770539329353405e-004 + i*-2.6269393788859837e-004
    2.8327816379376536e-002 + i*-2.8043097521075512e-002
    2.8327816379376536e-002 + i*2.8043097521075512e-002
    -3.5143916521672736e-001 + i*7.6099293791750899e-001
    -3.5143916521672736e-001 + i*-7.6099293791750899e-001
    -2.1557854180002839e-001 + i*-6.7885062085917260e+000
    -2.1557854180002839e-001 + i*6.7885062085917260e+000
    1.3766087342116744e+001 + i*2.3108957560381295e+001
    1.3766087342116744e+001 + i*-2.3108957560381295e+001
    -5.1163592836068695e+001 + i*-2.9083358831436644e+001
    -5.1163592836068695e+001 + i*2.9083358831436644e+001
    7.5873006181213356e+001 + i*-1.3196778349347228e-062
  ];
  absterm = -1.7011870763403530e-013;
case 14
  z = [
    8.8977731864688874e+000 + i*1.6630982619902085e+001
    8.8977731864688874e+000 + i*-1.6630982619902085e+001
    3.7032750494234530e+000 + i*1.3656371871483268e+001
    3.7032750494234530e+000 + i*-1.3656371871483268e+001
    2.0875863825012622e-001 + i*1.0991260561901260e+001
    2.0875863825012622e-001 + i*-1.0991260561901260e+001
    -2.2697838292311197e+000 + i*8.4617379730402202e+000
    -2.2697838292311197e+000 + i*-8.4617379730402202e+000
    -3.9933697105785502e+000 + i*6.0048316422350458e+000
    -3.9933697105785502e+000 + i*-6.0048316422350458e+000
    -5.0893450605806398e+000 + i*3.5888240290269957e+000
    -5.0893450605806398e+000 + i*-3.5888240290269957e+000
    -5.6231425727459730e+000 + i*1.1940690463439718e+000
    -5.6231425727459730e+000 + i*-1.1940690463439718e+000
  ];
  kappa = [
    7.1542880635891087e-005 + i*1.4361043349541268e-004
    7.1542880635891087e-005 + i*-1.4361043349541268e-004
    -9.4390253107360812e-003 + i*-1.7184791958482975e-002
    -9.4390253107360812e-003 + i*1.7184791958482975e-002
    3.7636003878227037e-001 + i*3.3518347029450113e-001
    3.7636003878227037e-001 + i*-3.3518347029450113e-001
    -4.8071120988325475e+000 + i*-1.3209793837428490e+000
    -4.8071120988325475e+000 + i*1.3209793837428490e+000
    2.3498232091082567e+001 + i*-5.8083591297139217e+000
    2.3498232091082567e+001 + i*5.8083591297139217e+000
    -4.6933274488831053e+001 + i*4.5643649768827949e+001
    -4.6933274488831053e+001 + i*-4.5643649768827949e+001
    2.7875161940145581e+001 + i*-1.0214733999056492e+002
    2.7875161940145581e+001 + i*1.0214733999056492e+002
  ];
  absterm = 1.8321743782540416e-014;
case 15
  z = [
    9.8656554814678863e+000 + i*1.7952933852339257e+001
    9.8656554814678863e+000 + i*-1.7952933852339257e+001
    4.4737932688253244e+000 + i*1.4936391977842693e+001
    4.4737932688253244e+000 + i*-1.4936391977842693e+001
    7.9564237187203446e-001 + i*1.2242302351525737e+001
    7.9564237187203446e-001 + i*-1.2242302351525737e+001
    -1.8663076642759009e+000 + i*9.6912911082719084e+000
    -1.8663076642759009e+000 + i*-9.6912911082719084e+000
    -3.7800254040924197e+000 + i*7.2183808997787393e+000
    -3.7800254040924197e+000 + i*-7.2183808997787393e+000
    -5.0786185437225377e+000 + i*4.7910656182060452e+000
    -5.0786185437225377e+000 + i*-4.7910656182060452e+000
    -5.8337608206534517e+000 + i*2.3896254821286935e+000
    -5.8337608206534517e+000 + i*-2.3896254821286935e+000
    -6.0817517164797259e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    6.1226641244729380e-005 + i*-1.3670205702749230e-005
    6.1226641244729380e-005 + i*1.3670205702749230e-005
    -9.1520967705777806e-003 + i*2.1051371454956324e-003
    -9.1520967705777806e-003 + i*-2.1051371454956324e-003
    2.4856731396842405e-001 + i*-1.5191865467761073e-001
    2.4856731396842405e-001 + i*1.5191865467761073e-001
    -1.8742180382320894e+000 + i*2.9200809102039922e+000
    -1.8742180382320894e+000 + i*-2.9200809102039922e+000
    1.2019829126990984e+000 + i*-2.0311351938151439e+001
    1.2019829126990984e+000 + i*2.0311351938151439e+001
    3.0785291798182048e+001 + i*5.9389767029387862e+001
    3.0785291798182048e+001 + i*-5.9389767029387862e+001
    -1.1353763362789653e+002 + i*-6.9128248850683022e+001
    -1.1353763362789653e+002 + i*6.9128248850683022e+001
    1.6637020102283867e+002 + i*5.6265588259306304e-062
  ];
  absterm = -1.9731389966128034e-015;
case 16
  z = [
    1.0843917078696986e+001 + i*1.9277446167181651e+001
    1.0843917078696986e+001 + i*-1.9277446167181651e+001
    5.2649713434426522e+000 + i*1.6220221473167935e+001
    5.2649713434426522e+000 + i*-1.6220221473167935e+001
    1.4139284624888904e+000 + i*1.3497725698892721e+001
    1.4139284624888904e+000 + i*-1.3497725698892721e+001
    -1.4193758971857036e+000 + i*1.0925363484496751e+001
    -1.4193758971857036e+000 + i*-1.0925363484496751e+001
    -3.5091036084148506e+000 + i*8.4361989858843760e+000
    -3.5091036084148506e+000 + i*-8.4361989858843760e+000
    -4.9931747377180455e+000 + i*5.9968817136039023e+000
    -4.9931747377180455e+000 + i*-5.9968817136039023e+000
    -5.9481522689511781e+000 + i*3.5874573620183634e+000
    -5.9481522689511781e+000 + i*-3.5874573620183634e+000
    -6.4161776990994213e+000 + i*1.1941223933701262e+000
    -6.4161776990994213e+000 + i*-1.1941223933701262e+000
  ];
  kappa = [
    5.0901521865241194e-007 + i*-2.4220017652852255e-005
    5.0901521865241194e-007 + i*2.4220017652852255e-005
    -2.1151742182463860e-004 + i*4.3892969647380299e-003
    -2.1151742182463860e-004 + i*-4.3892969647380299e-003
    -4.1023136835406988e-002 + i*-1.5743466173455728e-001
    -4.1023136835406988e-002 + i*1.5743466173455728e-001
    1.4793007113558780e+000 + i*1.7686588323782464e+000
    1.4793007113558780e+000 + i*-1.7686588323782464e+000
    -1.5059585270022891e+001 + i*-5.7514052776425739e+000
    -1.5059585270022891e+001 + i*5.7514052776425739e+000
    6.2518392463209082e+001 + i*-1.1190391094283951e+001
    6.2518392463209082e+001 + i*1.1190391094283951e+001
    -1.1339775178483859e+002 + i*1.0194721704215897e+002
    -1.1339775178483859e+002 + i*-1.0194721704215897e+002
    6.4500878025537119e+001 + i*-2.2459440762652090e+002
    6.4500878025537119e+001 + i*2.2459440762652090e+002
  ];
  absterm = 2.1248537104952236e-016;
case 17
  z = [
    1.1831463871993872e+001 + i*2.0604284737879819e+001
    1.1831463871993872e+001 + i*-2.0604284737879819e+001
    6.0745195506553076e+000 + i*1.7507540614605766e+001
    6.0745195506553076e+000 + i*-1.7507540614605766e+001
    2.0599532634925390e+000 + i*1.4757204131264295e+001
    2.0599532634925390e+000 + i*-1.4757204131264295e+001
    -9.3435321757301548e-001 + i*1.2163680239134052e+001
    -9.3435321757301548e-001 + i*-1.2163680239134052e+001
    -3.1881776044851189e+000 + i*9.6581294487467488e+000
    -3.1881776044851189e+000 + i*-9.6581294487467488e+000
    -4.8435687827054421e+000 + i*7.2063323757887590e+000
    -4.8435687827054421e+000 + i*-7.2063323757887590e+000
    -5.9810514079943164e+000 + i*4.7880039201107367e+000
    -5.9810514079943164e+000 + i*-4.7880039201107367e+000
    -6.6472527967243549e+000 + i*2.3894049347934923e+000
    -6.6472527967243549e+000 + i*-2.3894049347934923e+000
    -6.8667528710097576e+000 + i*0.0000000000000000e+000
  ];
  kappa = [
    -8.9407105063935463e-006 + i*-2.3781677789583917e-006
    -8.9407105063935463e-006 + i*2.3781677789583917e-006
    1.9116769326330261e-003 + i*6.3437557511259531e-004
    1.9116769326330261e-003 + i*-6.3437557511259531e-004
    -8.8078059570304915e-002 + i*-3.3061492788829978e-003
    -8.8078059570304915e-002 + i*3.3061492788829978e-003
    1.3591779848091783e+000 + i*-5.6284847646675629e-001
    1.3591779848091783e+000 + i*5.6284847646675629e-001
    -7.5605865034125488e+000 + i*9.4808935373955112e+000
    -7.5605865034125488e+000 + i*-9.4808935373955112e+000
    7.3089961251921229e+000 + i*-5.6081041554869664e+001
    7.3089961251921229e+000 + i*5.6081041554869664e+001
    6.7752463927849405e+001 + i*1.4691822942529996e+002
    6.7752463927849405e+001 + i*-1.4691822942529996e+002
    -2.5116416819550312e+002 + i*-1.6105910304647810e+002
    -2.5116416819550312e+002 + i*1.6105910304647810e+002
    3.6478058396882665e+002 + i*-1.0484554092999689e-061
  ];
  absterm = -2.2881485632478918e-017;
case 18
  z = [
    1.2827374220122028e+001 + i*2.1933247570118215e+001
    1.2827374220122028e+001 + i*-2.1933247570118215e+001
    6.9005256273528106e+000 + i*1.8798070435680444e+001
    6.9005256273528106e+000 + i*-1.8798070435680444e+001
    2.7306872304074941e+000 + i*1.6020446386762504e+001
    2.7306872304074941e+000 + i*-1.6020446386762504e+001
    -4.1562310374567896e-001 + i*1.3405983959861803e+001
    -4.1562310374567896e-001 + i*-1.3405983959861803e+001
    -2.8233463260741503e+000 + i*1.0883998027207012e+001
    -2.8233463260741503e+000 + i*-1.0883998027207012e+001
    -4.6381519860313993e+000 + i*8.4193942537854021e+000
    -4.6381519860313993e+000 + i*-8.4193942537854021e+000
    -5.9438661140047904e+000 + i*5.9914988212049538e+000
    -5.9438661140047904e+000 + i*-5.9914988212049538e+000
    -6.7906766853272105e+000 + i*3.5865163349653240e+000
    -6.7906766853272105e+000 + i*-3.5865163349653240e+000
    -7.2074477692175556e+000 + i*1.1941593642193036e+000
    -7.2074477692175556e+000 + i*-1.1941593642193036e+000
  ];
  kappa = [
    -1.6688665300102994e-006 + i*3.0744171881614964e-006
    -1.6688665300102994e-006 + i*-3.0744171881614964e-006
    5.0476383984256190e-004 + i*-7.5273675591987254e-004
    5.0476383984256190e-004 + i*7.5273675591987254e-004
    -1.4992553670193785e-002 + i*4.3993277109943413e-002
    -1.4992553670193785e-002 + i*-4.3993277109943413e-002
    -8.0471289382478620e-002 + i*-9.0175882687044429e-001
    -8.0471289382478620e-002 + i*9.0175882687044429e-001
    4.8312929707515000e+000 + i*7.2512668730184311e+000
    4.8312929707515000e+000 + i*-7.2512668730184311e+000
    -4.3058040835837097e+001 + i*-2.0281545516552573e+001
    -4.3058040835837097e+001 + i*2.0281545516552573e+001
    1.5905342288043994e+002 + i*-2.0056917236524558e+001
    1.5905342288043994e+002 + i*2.0056917236524558e+001
    -2.6803706128395891e+002 + i*2.2636122404243966e+002
    -2.6803706128395891e+002 + i*-2.2636122404243966e+002
    1.4730534701668390e+002 + i*-4.9349607053537528e+002
    1.4730534701668390e+002 + i*4.9349607053537528e+002
  ];
  absterm = 2.4639157377651692e-018;
otherwise
  error('Sorry, those we don''t have.');
end

r.name = 'best rational approximation to exp on (-inf,0]';
r.absterm = absterm;
r.conj_poles = -z(2:2:end);
r.conj_coeff = kappa(2:2:end);
if mod(degree,2)
    r.single_poles = -real(z(end));
    r.single_coeff = real(kappa(end));
else
    r.single_poles = [];
    r.single_coeff = [];
end;


function [weights,poles] = ratcfud(m,f)

nf = 256;
w = exp(2*pi*sqrt(-1)*(0:nf-1)/nf);
z = f(w);
gamma = fft(z)/nf;   % gamma = [ g_0,g_1,...,g_{N-1} ]
N = 25;
gamma = real(gamma(1:N));
%gamma = 1./factorial(0:N-1);  % exp
z = f(w);
H = hankel(gamma);
[U,S,V] = svd(H);
u = U(:,m+1);
v = V(:,m+1);

% improve v
v = u;
lambda = v'*H*v;
for j = 1:0
    v = (H-lambda*eye(size(H)))\v;
    v = v/norm(v);
end;
% end improve v
r = roots(v(end:-1:1));
q_in = poly(r(abs(r)<1));
q_out = poly(r(abs(r)>1));
q_out = q_out*v(end);
G = toeplitz(q_out(end:-1:end-m+1),[q_out(end),zeros(1,m-1)]);
T = toeplitz([gamma(1);zeros(m-1,1)],gamma(1:N-1));
alpha = G\(T*v(2:end));
beta = q_in(end:-1:1);
[weights,poles,absterm] = symres(alpha,beta);






%%
function [weights,poles,absterm] = ratsqrt(b,d)
% [weights,poles,absterm] = ratsqrt(b,d)
% returns weights and poles of best relative (!) rat. approx. of degree d
% to sqrt(z) on the set [1,b]
% Akhiezer: Elements of the theory of elliptic functions, pp. 148

error('sqrtZ has been removed. Please use sqrtinvZ to approximate x/sqrt(x).');






%%
function [weights,poles] = ratsqrtinv(b,d)
% [weights,poles] = ratsqrtinv(b,d)
% returns weights and poles of best relative (!) rat. approx. of degree d
% to 1/sqrt(z) on the set [1,b]
% Akhiezer: Elements of the theory of elliptic functions, pp. 148
% ba to 1/sqrt(z)
k = sqrt(2)/sqrt(b);
ks = sqrt(1-k^2);
Ks = ellipke(ks);
ell = 1:2*d-1;
c = ellipj(ell*Ks/(2*d),ks).^2;
c = c ./ ( 1 - c );
zeros = -c(2:2:end);
poles = -c(1:2:end);
% scalierungsfaktor D bestimmen
[sn,cn,dn] = ellipj((1:2*d).*Ks./(2*d),ks);
extrema = [ 1 dn.^-2 ];
r = 1;
for ell = 1:d
    if ell<d
        r = r .* (extrema-zeros(ell)) ./ (extrema-poles(ell));
    else
        r = r ./ (extrema-poles(ell));
    end;
end;
D = (max(sqrt(extrema).*r)+min(sqrt(extrema).*r))/2;
% PFE of p/q
[weights,poles]=symres(poly(zeros),poly(poles));   %poles brauch eigtl. nicht ber. werden
weights = weights/D;



%%
function [weights,poles] = ratsign(b,d)
% [weights,poles] = ratsign(b,d)
% returns weights and poles of best rational approximation of degree 2*d
% to sign(z) on the set [-b,b]\[-1,1]
% Akhiezer: Elements of the theory of elliptic functions, pp. 148
% ba to 1/sqrt(z)
k = sqrt(2)/b;
ks = sqrt(1-k^2);
Ks = ellipke(ks);
ell = 1:2*d-1;
c = ellipj(ell*Ks/(2*d),ks).^2;
c = c ./ ( 1 - c );
zeros = -c(2:2:end);
poles = -c(1:2:end);
% scalierungsfaktor D bestimmen
[sn,cn,dn] = ellipj((1:2*d).*Ks./(2*d),ks);
extrema = [ 1 dn.^-2 ];
r = 1;
for ell = 1:d
    if ell<d
        r = r .* (extrema-zeros(ell)) ./ (extrema-poles(ell));
    else
        r = r ./ (extrema-poles(ell));
    end;
end;
D = (max(sqrt(extrema).*r)+min(sqrt(extrema).*r))/2;
% PFE of p/q
[weights,poles]=symres(poly(zeros),poly(poles));   %poles brauch eigtl. nicht ber. werden
weights = weights/D;
% sign = z/sqrt(z^2)
weights = [weights/2 ; weights/2];
poles = [sqrt(poles) ; -sqrt(poles)];



%%

function [coeff,poles,p] = symres(alpha,beta)
%[COEFF,POLES,P] = SYMRES(ALPHA,BETA) Partial fraction expansion
% Try to compute PFE of rational function poly(ALPHA)/poly(BETA)
% using maple. If this fails, fall back and use resiude().
% The outputs are the coefficients (COEFF) and POLES of the
% PFE, and the polynomial part P.
%
% SG, Nov 2008

try
    alpha = alpha(:).'; beta = beta(:).'; p = 0;
    alpha = alpha(find(alpha,1):end);
    beta = beta(find(beta,1):end);
    
    if length(alpha) >= length(beta),           % divide out polynom
        [p,alpha] = deconv(alpha,beta);
        alpha = alpha(find(alpha,1):end);
    end
    alpha = alpha ./ beta(1); beta = beta ./ beta(1);   % Normalize.

    z = sym('z');
    maple('Digits:=64');
    A = sum(z.^(length(alpha)-1:-1:0).*alpha);
    B = sum(z.^(length(beta)-1:-1:0).*beta);
    P = maple('convert',A/B,'parfrac',z,'complex');
    P = char(P);
    r = regexp(P,'(?<sign>[+-]?)(?<coeff>[\(\d*+-ei\)]*)/\(z(?<poles>[\d*+-ei]*)\)','names');
    for j = 1:length(r)
        if r(j).sign == '-',
            s = -1;
        else
            s = 1;
        end;
        coeff(j,1) = s*eval(r(j).coeff);
        poles(j,1) = -eval(r(j).poles);
    end;
catch
    warning('maple not acessible. using residue().');
    [coeff,poles,p] = residue(alpha,beta);
    if isempty(p)
        p = 0;
    end;
end;
